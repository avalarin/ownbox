//= require knockout
//= require modules/http
//= require modules/messages
//= require typeahead

function Datatable() {

  // private variables

  var http = require('http')
  var messages = require('messages')
  var modals = require('messages')
  var $ = require('jquery')
  var sharesPath = '/settings/shares/'
  var usersPath = '/users.json'
  var userPath = '/users/{userName}.json'
  var sharePermissionsPath = '/settings/shares/{shareId}/permissions.json'
  var table = this

  // public methods

  table.items = ko.observableArray([])

  table.editModal = {
    element: $('#edit-modal'),
    formElement: $('#edit-modal form'),
    mode: ko.observable('create'),
    id: ko.observable(-1),
    name: ko.observable(''),
    path: ko.observable(''),

    reset: function () {
      this.mode('create')
      this.name('')
      this.path('')
      this.id(-1)
    },
    editMode: function(item) {
      this.mode('edit')
      this.name(item.name)
      this.path(item.path)
      this.id(item.id)
    },
    show: function() {
      this.element.modal('show')
    },
    close: function() {
      this.element.modal('hide')
      this.reset()
    },
    valid: function() {
      return this.formElement.valid()
    },
    getData: function() {
      return this.formElement.serialize()
    }
  }

  table.securityModal = {
    element: $('#security-modal'),
    userNameInput: $('#security-modal #user-name'),
    items: ko.observableArray([]),
    share: undefined,

    reset: function() {
      shareId = undefined
      this.items.removeAll()
    },
    show: function(share) {
      this.share = share
      var modal = this
      http.request({
        url: sharePermissionsPath.replace("{shareId}", share.id),
        success: function(data) {
          _.each(data, function(p) {
            modal.items.push(modal.wrapItem(p.user.name, p.user.email, p.user.displayName, p.permission))
          })
          modal.element.modal('show')
        }
      })
    },
    close: function() {
      this.element.modal('hide')
      this.reset()
    },
    save: function() {
      var modal = this
      http.request({
        url: sharePermissionsPath.replace("{shareId}", modal.share.id),
        type: 'PATCH',
        dataType: 'json',
        contentType: 'application/json',
        data: JSON.stringify({ permissions: _.map(modal.items(), function (p) { return { user: p.name, permission: p.mode() } }) }),
        success: function() {
          messages.success('<%= I18n.t "settings.shares.index.permissions_updated" %>')
        }
      })
      this.close() 
    },

    addUser: function() {
      var userName = this.userNameInput.val()
      if (!userName) return
      var modal = this
      http.request({
        url: userPath.replace("{userName}", userName),
        error: function(status, message, data) {
          if (status == 404) {
            alert('<%= I18n.t "messages.user_not_found" %>')
          } else {
            http.defaultErrorHandler(status, message, data)
          }
        },
        success: function(data) {
          if (_.find(modal.items(), function (u) { return u.name == data.name })) {
            alert('<%= I18n.t "messages.item_already_found" %>')
            return
          }
          modal.items.push(modal.wrapItem(data.name, data.email, data.displayName, "readonly"))
          modal.userNameInput.val("")
        }
      })

      
    },
    wrapItem: function(name, email, displayName, permission) {
      return {
        name: name,
        email: email,
        displayName: displayName,
        mode: ko.observable(permission),

        switchReadOnly: function() {
          this.mode("readonly")
        },
        switchReadWrite: function() {
          this.mode("readwrite")
        },
        remove: function() {
          table.securityModal.items.remove(this)
        }
      }
    }


  }

  table.refresh = function() {
    http.request({
      url: sharesPath,
      success: function (data) {
        items = data.items
        table.items.removeAll()
        _.each(items, function(item) {
          table.items.push({
            id: item.id,
            name: item.name,
            path: item.path,
            edit: editItem,
            editSecurity: editSecurity,
            delete: deleteItem
          })
        })
      }
    })
  }

  table.createShare = function() {
    if (!table.editModal.valid()) return
    var data = table.editModal.getData()
    http.request({
      url: sharesPath,
      data: data,
      success: function() {
        table.refresh()
      },
      type: 'POST'
    })
    table.editModal.close()
  }

  table.updateShare = function() {
    if (!table.editModal.valid()) return
    var data = table.editModal.getData()
    http.request({
      url: sharesPath,
      data: data,
      success: function() {
        table.refresh()
      },
      type: 'PATCH'
    })
    table.editModal.close()
  }

  // private methods

  function deleteItem() {
    var item = this
    if (confirm('<%= I18n.t "messages.confirm_deletion" %>')) {
      http.request({
        url: sharesPath,
        type: 'DELETE',
        data: { id: item.id },
        success: function() {
          table.refresh()
        }
      })
    }
  }

  function editItem() {
    var item = this
    table.editModal.editMode(this)
    table.editModal.show()
  }

  
  function editSecurity() {
    var item = this
    table.securityModal.show(item)
  }

  // initialization
  table.refresh()

  var usersList = new Bloodhound({
    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    limit: 10,
    prefetch: usersPath
  })
  usersList.initialize()

  $("#security-modal #user-name").typeahead({
    hint: true,
    highlight: true,
    minLength: 1
  },
  { name: 'users',
    displayKey: 'name',
    source: usersList.ttAdapter() 
  })
}

dt = new Datatable()
ko.applyBindings(dt)
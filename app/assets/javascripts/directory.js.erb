//= require knockout
//= require modules/http
//= require modules/messages
//= require controls/page
//= require controls/browser
//= require controls/uploader_modal
//= require controls/image_viewer
//= require controls/exporter
//= require directory_values

$(function() {
  var http = require('http')

  var page = new Page()
  
  var browser = new Browser({
    history: true
  })
  var exporter = new Exporter()

  var downloadControl = {
    text: window.localization.download,
    icon: 'download',
    style: '',
    execute: function() { 
      var selected = browser.selected()
      var current = browser.currentItem()

      if (selected.length == 1) {
        if (selected[0].type == 'directory') {
          exporter.modal.show(selected[0], [])
        } else {
          http.downloadURL(selected[0].url)
        }
      } else {
        var filter = _.map(selected, function(item) { 
          if (item.type == 'directory') {
            return item.name + "/**/**"
          } else {
            return item.name
          }
        })
        exporter.modal.show(current, filter)
      }
    },
    canExecute: ko.observable(false)
  }
  browser.controls.push(downloadControl)

  browser.selected.subscribe(function(selected) {
    downloadControl.canExecute(selected.length > 0)
  })

  var oldDownloadItem = browser.downloadItem;
  browser.downloadItem = function(data, event) {
    if (event) event.stopPropagation()
    if (data.type == 'directory') {
      exporter.modal.show(data, [])
    } else {
      oldDownloadItem(data, event)
    }
  }

  page.addControl('browser', browser)
  page.addControl('exporter', exporter)
  page.attach()

  browser.go(window.currentItem)
  delete window.currentItem

  $('#private-data, #shared-data').click(function(e) {
    var url = $(this).attr('href')
    var item = { type: 'directory', url: url }
    browser.go(item)
    return false
  })

})


$(document).on('error', '.column-icon img', function() {
  console.log('image error')
})

function handlePreviewError(element) {
  var http = require('http')
  var $element = $(element)
  // var originalSource = $element.attr('src')
  // $element.attr('src', '/assets/loading.gif')
  // var timeout = 1000
  // var checkPreview = function() {
  //   http.request({
  //     url: originalSource + "?status=true",
  //     success: function() {
  //       $element.attr('src', originalSource)
  //     }, 
  //     error: function() {
  //       setTimeout(checkPreview, timeout)
  //       timeout *= 1.2
  //     }
  //   })
  // }
  // setTimeout(checkPreview, timeout)
}